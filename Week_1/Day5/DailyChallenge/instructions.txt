https://css-tricks.com/almanac/properties/a/animation/
https://www.w3schools.com/css/css3_animations.asp
https://thoughtbot.com/blog/css-animation-for-beginners


Animations play a critical role in improving user experience as they assist in providing improved visual feedback and helps in making interactions with the website striking.

Animations need to be used wisely, or you could end up creating a page that is more distracting than interactive. The entire purpose of animations is to serve as an aid, rather than a hindrance while using web applications.


Recreate the animations of this page

    Create 8 divs.
    Each div should be styled with a different animation.


All the divs should have a common style :

body > div
{
 width:483px;
 height:298px;
 background:#676470;
 transition:all 0.3s ease;
}


div {
  transition: <property> <duration> <timing-function> <delay>;
}


In the style above transition:all 0.3s ease

    the transition is applied on all properties
    the speed of the transition is 0.3 seconds
    the timing function is ease : increases in velocity towards the middle of the transition, slowing back down at the end
    there is no delay


    Fade In effect
    It’s a great way to emphasize functionality or draw attention to a call to action.
    Fade in effects are coded in two steps: first, you set the initial state; next, you set the change

    .fade
    {
     opacity:0.5;
    }
    .fade:hover
    {
     opacity:1;
    }



    2. Change color effect
    Set the color on hover

    .color:hover
    {
     background:#53a7ea;
    }



    3. Grow & Shrink effect
    We can use CSS3’s transform property.
    To enlarge an element we specify a value greater than 1, to shrink it, we specify a value less than 1

    .grow:hover
    {
     -webkit-transform: scale(1.3);
     -ms-transform: scale(1.3);
     transform: scale(1.3);
    }

    .shrink:hover
    {
     -webkit-transform: scale(0.8);
     -ms-transform: scale(0.8);
     transform: scale(0.8);
    }



    4. Rotate elements effect
    CSS transforms have a number of different uses, and one of the best is transforming the rotation of an element.

    .rotate:hover
    {
     -webkit-transform: rotateZ(-30deg);
     -ms-transform: rotateZ(-30deg);
     transform: rotateZ(-30deg);
    }



    5. Square to circle effect
    A really popular effect is transitioning a square element into a round one, and vice versa. With CSS, it’s a simple effect to achieve, we just transition the border-radius property.

    .circle:hover
    {
     border-radius:50%;
    }



    6. 3D shadow effect
    This effect is achieved by adding a box shadow, and then moving the element on the x axis using the transform and translate properties so that it appears to grow out of the screen.

    .threed:hover
    {
     box-shadow:
     1px 1px #53a7ea,
     2px 2px #53a7ea,
     3px 3px #53a7ea;
     -webkit-transform: translateX(-3px);
     transform: translateX(-3px);
    }



    7. Swing effect :
    Not all elements use the transition property. We can also create highly complex animations using @keyframes, animation and animation-iteration.
    You’ll notice that due to implementation issues, we need to use @-webkit-keyframes as well as @keyframes.
    Webkit code needs to be added in CSS to ensure it renders correctly on Chrome and Safari due to the lack of cross-compatibility.

    @-webkit-keyframes swing
    {
        15%
        {
            -webkit-transform: translateX(5px);
            transform: translateX(5px);
        }
        30%
        {
            -webkit-transform: translateX(-5px);
            transform: translateX(-5px);
        } 
        50%
        {
            -webkit-transform: translateX(3px);
            transform: translateX(3px);
        }
        65%
        {
            -webkit-transform: translateX(-3px);
            transform: translateX(-3px);
        }
        80%
        {
            -webkit-transform: translateX(2px);
            transform: translateX(2px);
        }
        100%
        {
            -webkit-transform: translateX(0);
            transform: translateX(0);
        }
    }
    @keyframes swing
    {
        15%
        {
            -webkit-transform: translateX(5px);
            transform: translateX(5px);
        }
        30%
        {
            -webkit-transform: translateX(-5px);
            transform: translateX(-5px);
        }
        50%
        {
            -webkit-transform: translateX(3px);
            transform: translateX(3px);
        }
        65%
        {
            -webkit-transform: translateX(-3px);
            transform: translateX(-3px);
        }
        80%
        {
            -webkit-transform: translateX(2px);
            transform: translateX(2px);
        }
        100%
        {
            -webkit-transform: translateX(0);
            transform: translateX(0);
        }
    }

    .swing:hover
    {
        -webkit-animation: swing 1s ease;
        animation: swing 1s ease;
        -webkit-animation-iteration-count: 1;
        animation-iteration-count: 1;
    }



    8. Inset border effect
    We create a button with no background and a heavy border.
    We can of course add a border to an element simply, but that will change the element’s position. We could fix that problem using box sizing, but a far simpler solution is the transition in a border using an inset box shadow.

    .border:hover
    {
     box-shadow: inset 0 0 0 25px #53a7ea;
    }
